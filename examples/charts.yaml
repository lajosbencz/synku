---
#>> example-charts-frontend
apiVersion: apps/v1
kind: Deployment
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      synku/app: example-charts-frontend
  template:
    metadata:
      labels:
        synku/app: example-charts-frontend
    spec:
      containers:
        - name: frontend
          image: custom-ui:latest
          ports:
            - protocol: TCP
              containerPort: 8080
          resources:
            requests:
              # add [250m] examples/charts.ts:37
              cpu: 250m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
            limits:
              # add [1000m] examples/charts.ts:37
              cpu: 1000m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
metadata:
  # add [example-charts-frontend] src/components/default.ts:84
  name: example-charts-frontend
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label

---
apiVersion: v1
kind: Service
spec:
  type: ClusterIP
  selector:
    synku/app: example-charts-frontend
  ports:
    - port: 80
      targetPort: 8080
metadata:
  # add [example-charts-frontend] src/components/default.ts:84
  name: example-charts-frontend
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label
#<< example-charts-frontend


---
#>>> example-charts-backend-kafka
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: example-charts-backend-kafka-controller
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: example-charts-backend-kafka
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9093
        - port: 9092
        - port: 9094

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-charts-backend-kafka-broker
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: broker
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: example-charts-backend-kafka
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: broker
      app.kubernetes.io/part-of: kafka

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: example-charts-backend-kafka-controller
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: example-charts-backend-kafka
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-charts-backend-kafka-provisioning
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
automountServiceAccountToken: false

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-charts-backend-kafka
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
automountServiceAccountToken: false

---
apiVersion: v1
kind: Secret
metadata:
  name: example-charts-backend-kafka-user-passwords
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
type: Opaque
data:
  client-passwords: MXVkTVdRSVpiRQ==
  system-user-password: MXVkTVdRSVpiRQ==
  inter-broker-password: d1pKRFpTVURqTQ==
  controller-password: WFRPNlZGUklOVA==

---
apiVersion: v1
kind: Secret
metadata:
  name: example-charts-backend-kafka-kraft
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
type: Opaque
data:
  cluster-id: OHZaeFp2NEgzbHA2SEJuQW51M3BZYQ==
  controller-0-id: WWZpWWowa0hSMzZpR0RFVXd0OGl1aw==
  controller-1-id: ZEFvOGNCV3ZVRkV5bUo0VGUzRmw4ag==
  controller-2-id: RDM5MHhVY2ZNMm94V3VLS2RrR1VmMg==

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-charts-backend-kafka-controller-configuration
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
data:
  server.properties: |-
    advertised.listeners=CLIENT://advertised-address-placeholder:9092,INTERNAL://advertised-address-placeholder:9094
    controller.listener.names=CONTROLLER
    controller.quorum.bootstrap.servers=example-charts-backend-kafka-controller-0.example-charts-backend-kafka-controller-headless.default.svc.cluster.local:9093,example-charts-backend-kafka-controller-1.example-charts-backend-kafka-controller-headless.default.svc.cluster.local:9093,example-charts-backend-kafka-controller-2.example-charts-backend-kafka-controller-headless.default.svc.cluster.local:9093
    inter.broker.listener.name=INTERNAL
    listener.name.client.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required user_user1="password-placeholder-0";
    listener.name.client.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    listener.name.client.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required;
    listener.name.controller.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="controller_user" password="controller-password-placeholder" user_controller_user="controller-password-placeholder" user_user1="password-placeholder-0";
    listener.name.controller.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="controller_user" password="controller-password-placeholder";
    listener.name.controller.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="controller_user" password="controller-password-placeholder";
    listener.name.internal.plain.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="inter_broker_user" password="interbroker-password-placeholder" user_inter_broker_user="interbroker-password-placeholder" user_user1="password-placeholder-0";
    listener.name.internal.scram-sha-256.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.name.internal.scram-sha-512.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="inter_broker_user" password="interbroker-password-placeholder";
    listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,CLIENT:SASL_PLAINTEXT,INTERNAL:SASL_PLAINTEXT
    listeners=CLIENT://:9092,INTERNAL://:9094,CONTROLLER://:9093
    log.dir=/bitnami/kafka/data
    logs.dir=/opt/bitnami/kafka/logs
    process.roles=controller,broker
    sasl.enabled.mechanisms=PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
    sasl.mechanism.controller.protocol=PLAIN
    sasl.mechanism.inter.broker.protocol=PLAIN

---
apiVersion: v1
kind: Service
metadata:
  name: example-charts-backend-kafka-controller-headless
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-interbroker
      port: 9094
      protocol: TCP
      targetPort: interbroker
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
    - name: tcp-controller
      protocol: TCP
      port: 9093
      targetPort: controller
  selector:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka

---
apiVersion: v1
kind: Service
metadata:
  name: example-charts-backend-kafka
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 9092
      protocol: TCP
      targetPort: client
      nodePort: null
  selector:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/name: kafka
    app.kubernetes.io/part-of: kafka

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-charts-backend-kafka-controller
  namespace: default
  labels:
    app.kubernetes.io/instance: example-charts-backend-kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    app.kubernetes.io/version: 4.0.0
    helm.sh/chart: kafka-32.4.2
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: example-charts-backend-kafka
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: example-charts-backend-kafka-controller-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: example-charts-backend-kafka
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kafka
        app.kubernetes.io/version: 4.0.0
        helm.sh/chart: kafka-32.4.2
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
      annotations:
        checksum/configuration: e4be5467cc82b07d15f22ad40739f0b8413e3858dc9c391d1c8db38b90c07eab
        checksum/secret: 88c616ea8c7b0c6abd026f74e612b26b2744bc2a151aad20cb1ce16fb320196d
    spec:
      automountServiceAccountToken: false
      hostNetwork: false
      hostIPC: false
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: example-charts-backend-kafka
                    app.kubernetes.io/name: kafka
                    app.kubernetes.io/component: controller-eligible
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
        sysctls: []
      serviceAccountName: example-charts-backend-kafka
      enableServiceLinks: true
      initContainers:
        - name: prepare-config
          image: docker.io/bitnami/kafka:4.0.0-debian-12-r10
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              . /opt/bitnami/scripts/libkafka.sh
              configure_kafka_sasl() {
                  # Replace placeholders with passwords
                  replace_in_file "$KAFKA_CONF_FILE" "interbroker-password-placeholder" "$KAFKA_INTER_BROKER_PASSWORD"
                  replace_in_file "$KAFKA_CONF_FILE" "controller-password-placeholder" "$KAFKA_CONTROLLER_PASSWORD"
                  read -r -a passwords <<< "$(tr ',;' ' ' <<<"${KAFKA_CLIENT_PASSWORDS:-}")"
                  for ((i = 0; i < ${#passwords[@]}; i++)); do
                      replace_in_file "$KAFKA_CONF_FILE" "password-placeholder-${i}\"" "${passwords[i]}\""
                  done
              }

              cp /configmaps/server.properties $KAFKA_CONF_FILE

              # Get pod ID and role, last and second last fields in the pod name respectively
              POD_ID="${MY_POD_NAME##*-}"
              POD_ROLE="${MY_POD_NAME%-*}"; POD_ROLE="${POD_ROLE##*-}"

              # Configure node.id
              ID=$((POD_ID + KAFKA_MIN_ID))
              [[ -f "/bitnami/kafka/data/meta.properties" ]] && ID="$(grep "node.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
              kafka_server_conf_set "node.id" "$ID"
              # Configure initial controllers
              if [[ "controller" =~ "$POD_ROLE" ]]; then
                  INITIAL_CONTROLLERS=()
                  for ((i = 0; i < 3; i++)); do
                      var="KAFKA_CONTROLLER_${i}_DIR_ID"; DIR_ID="${!var}"
                      [[ $i -eq $POD_ID ]] && [[ -f "/bitnami/kafka/data/meta.properties" ]] && DIR_ID="$(grep "directory.id" /bitnami/kafka/data/meta.properties | awk -F '=' '{print $2}')"
                      INITIAL_CONTROLLERS+=("${i}@${KAFKA_FULLNAME}-${POD_ROLE}-${i}.${KAFKA_CONTROLLER_SVC_NAME}.${MY_POD_NAMESPACE}.svc.${CLUSTER_DOMAIN}:${KAFKA_CONTROLLER_PORT}:${DIR_ID}")
                  done
                  echo "${INITIAL_CONTROLLERS[*]}" | awk -v OFS=',' '{$1=$1}1' > /shared/initial-controllers.txt
              fi
              replace_in_file "$KAFKA_CONF_FILE" "advertised-address-placeholder" "${MY_POD_NAME}.${KAFKA_FULLNAME}-${POD_ROLE}-headless.${MY_POD_NAMESPACE}.svc.${CLUSTER_DOMAIN}"
              sasl_env_vars=(
                KAFKA_CLIENT_PASSWORDS
                KAFKA_INTER_BROKER_PASSWORD
                KAFKA_INTER_BROKER_CLIENT_SECRET
                KAFKA_CONTROLLER_PASSWORD
                KAFKA_CONTROLLER_CLIENT_SECRET
              )
              for env_var in "${sasl_env_vars[@]}"; do
                  file_env_var="${env_var}_FILE"
                  if [[ -n "${!file_env_var:-}" ]]; then
                      if [[ -r "${!file_env_var:-}" ]]; then
                          export "${env_var}=$(< "${!file_env_var}")"
                          unset "${file_env_var}"
                      else
                          warn "Skipping export of '${env_var}'. '${!file_env_var:-}' is not readable."
                      fi
                  fi
              done
              configure_kafka_sasl
              if [[ -f /secret-config/server-secret.properties ]]; then
                  cat /secret-config/server-secret.properties >> $KAFKA_CONF_FILE
              fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KAFKA_FULLNAME
              value: example-charts-backend-kafka
            - name: CLUSTER_DOMAIN
              value: cluster.local
            - name: KAFKA_VOLUME_DIR
              value: /bitnami/kafka
            - name: KAFKA_CONF_FILE
              value: /config/server.properties
            - name: KAFKA_MIN_ID
              value: "0"
            - name: KAFKA_CONTROLLER_SVC_NAME
              value: example-charts-backend-kafka-controller-headless
            - name: KAFKA_CONTROLLER_PORT
              value: "9093"
            - name: KAFKA_CONTROLLER_0_DIR_ID
              valueFrom:
                secretKeyRef:
                  name: example-charts-backend-kafka-kraft
                  key: controller-0-id
            - name: KAFKA_CONTROLLER_1_DIR_ID
              valueFrom:
                secretKeyRef:
                  name: example-charts-backend-kafka-kraft
                  key: controller-1-id
            - name: KAFKA_CONTROLLER_2_DIR_ID
              valueFrom:
                secretKeyRef:
                  name: example-charts-backend-kafka-kraft
                  key: controller-2-id
            - name: KAFKA_CLIENT_USERS
              value: user1
            - name: KAFKA_CLIENT_PASSWORDS_FILE
              value: /opt/bitnami/kafka/config/secrets/client-passwords
            - name: KAFKA_INTER_BROKER_USER
              value: inter_broker_user
            - name: KAFKA_INTER_BROKER_PASSWORD_FILE
              value: /opt/bitnami/kafka/config/secrets/inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: controller_user
            - name: KAFKA_CONTROLLER_PASSWORD_FILE
              value: /opt/bitnami/kafka/config/secrets/controller-password
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: kafka-config
              mountPath: /config
            - name: kafka-configmaps
              mountPath: /configmaps
            - name: kafka-secret-config
              mountPath: /secret-config
            - name: tmp
              mountPath: /tmp
            - name: init-shared
              mountPath: /shared
            - name: kafka-sasl
              mountPath: /opt/bitnami/kafka/config/secrets
              readOnly: true
        - args:
            - kafka
          command:
            - echo
          image: foobar
          name: foobar
      containers:
        - name: kafka
          image: docker.io/bitnami/kafka:4.0.0-debian-12-r10
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
          env:
            - name: KAFKA_HEAP_OPTS
              value: -XX:InitialRAMPercentage=75 -XX:MaxRAMPercentage=75
            - name: KAFKA_CFG_PROCESS_ROLES
              value: controller,broker
            - name: KAFKA_INITIAL_CONTROLLERS_FILE
              value: /shared/initial-controllers.txt
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KAFKA_KRAFT_CLUSTER_ID
              valueFrom:
                secretKeyRef:
                  name: example-charts-backend-kafka-kraft
                  key: cluster-id
            - name: KAFKA_KRAFT_BOOTSTRAP_SCRAM_USERS
              value: "true"
            - name: KAFKA_CLIENT_USERS
              value: user1
            - name: KAFKA_CLIENT_PASSWORDS_FILE
              value: /opt/bitnami/kafka/config/secrets/client-passwords
            - name: KAFKA_INTER_BROKER_USER
              value: inter_broker_user
            - name: KAFKA_INTER_BROKER_PASSWORD_FILE
              value: /opt/bitnami/kafka/config/secrets/inter-broker-password
            - name: KAFKA_CONTROLLER_USER
              value: controller_user
            - name: KAFKA_CONTROLLER_PASSWORD_FILE
              value: /opt/bitnami/kafka/config/secrets/controller-password
          ports:
            - name: controller
              containerPort: 9093
            - name: client
              containerPort: 9092
            - name: interbroker
              containerPort: 9094
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - -f
                - kafka
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: controller
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/kafka
            - name: logs
              mountPath: /opt/bitnami/kafka/logs
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
            - name: tmp
              mountPath: /tmp
            - name: init-shared
              mountPath: /shared
            - name: kafka-sasl
              mountPath: /opt/bitnami/kafka/config/secrets
              readOnly: true
      volumes:
        - name: kafka-configmaps
          configMap:
            name: example-charts-backend-kafka-controller-configuration
        - name: kafka-secret-config
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: init-shared
          emptyDir: {}
        - name: kafka-sasl
          projected:
            sources:
              - secret:
                  name: example-charts-backend-kafka-user-passwords
        - name: logs
          emptyDir: {}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
#<<< example-charts-backend-kafka


---
#>>> example-charts-backend-kafka-connect
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-charts-backend-kafka-connect-schema-registry
  namespace: default
  labels:
    app.kubernetes.io/name: schema-registry
    helm.sh/chart: schema-registry-6.0.2
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
automountServiceAccountToken: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-charts-backend-kafka-connect
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label
data:
  CONNECT_BOOTSTRAP_SERVERS: example-charts-backend-kafka-connect-kafka:9092
  CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
  CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-config
  CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
  CONNECT_GROUP_ID: kafka-connect
  CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  CONNECT_INTERNAL_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
  CONNECT_OFFSET_PARTITION_NAME: kafka-connect.1
  CONNECT_OFFSET_STORAGE_PARTITIONS: "-1"
  CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
  CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offset
  CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
  CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
  CONNECT_REST_ADVERTISED_HOST_NAME: connect
  CONNECT_REST_PORT: "28082"
  CONNECT_STATUS_STORAGE_PARTITIONS: "-1"
  CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
  CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-status
  CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://example-charts-backend-kafka-connect-schema-registry:8081

---
apiVersion: v1
kind: Service
metadata:
  name: example-charts-backend-kafka-connect-schema-registry-headless
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  labels:
    app.kubernetes.io/name: schema-registry
    helm.sh/chart: schema-registry-6.0.2
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8081
      targetPort: http
  selector:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/instance: example-charts-backend-kafka-connect

---
apiVersion: v1
kind: Service
metadata:
  name: example-charts-backend-kafka-connect-schema-registry
  namespace: default
  labels:
    app.kubernetes.io/name: schema-registry
    helm.sh/chart: schema-registry-6.0.2
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8081
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: schema-registry
    app.kubernetes.io/instance: example-charts-backend-kafka-connect

---
apiVersion: v1
kind: Service
metadata:
  name: example-charts-backend-kafka-connect
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  labels:
    helm.sh/chart: kafka-connect-0.4.0
    app.kubernetes.io/name: kafka-connect
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/version: 7.2.2
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  type: ClusterIP
  ports:
    - port: 8083
      targetPort: connect
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kafka-connect
    app.kubernetes.io/instance: example-charts-backend-kafka-connect

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-charts-backend-kafka-connect
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  labels:
    helm.sh/chart: kafka-connect-0.4.0
    app.kubernetes.io/name: kafka-connect
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/version: 7.2.2
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka-connect
      app.kubernetes.io/instance: example-charts-backend-kafka-connect
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka-connect
        app.kubernetes.io/instance: example-charts-backend-kafka-connect
    spec:
      securityContext: {}
      containers:
        - name: kafka-connect
          securityContext: {}
          image: confluentinc/cp-kafka-connect:7.2.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: connect
              containerPort: 8083
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: connect
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: connect
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          envFrom:
            - configMapRef:
                name: example-charts-backend-kafka-connect
          resources: {}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: example-charts-backend-kafka-connect-schema-registry
  namespace: default
  labels:
    app.kubernetes.io/name: schema-registry
    helm.sh/chart: schema-registry-6.0.2
    app.kubernetes.io/instance: example-charts-backend-kafka-connect
    app.kubernetes.io/managed-by: Helm
    # add [label] examples/charts.ts:31
    static: label
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app.kubernetes.io/name: schema-registry
      app.kubernetes.io/instance: example-charts-backend-kafka-connect
  serviceName: example-charts-backend-kafka-connect-schema-registry-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: schema-registry
        helm.sh/chart: schema-registry-6.0.2
        app.kubernetes.io/instance: example-charts-backend-kafka-connect
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: example-charts-backend-kafka-connect-schema-registry
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: schema-registry
                    app.kubernetes.io/instance: example-charts-backend-kafka-connect
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity: null
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: schema-registry
          image: docker.io/bitnami/schema-registry:7.2.2-debian-11-r11
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -ec
            - >
              exec /opt/bitnami/scripts/schema-registry/entrypoint.sh
              /opt/bitnami/scripts/schema-registry/run.sh
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: SCHEMA_REGISTRY_DEBUG
              value: "false"
            - name: SCHEMA_REGISTRY_LISTENERS
              value: http://0.0.0.0:8081
            - name: SCHEMA_REGISTRY_AVRO_COMPATIBILY_LEVEL
              value: backward
            - name: SCHEMA_REGISTRY_ADVERTISED_HOSTNAME
              value: $(MY_POD_NAME).example-charts-backend-kafka-connect-schema-registry-headless.default.svc.cluster.local
            - name: SCHEMA_REGISTRY_KAFKA_BROKERS
              value: PLAINTEXT://kafka-connect-kafka:9092
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 10
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: http
          resources:
            limits: {}
            requests: {}
#<<< example-charts-backend-kafka-connect


---
#>>> example-charts-backend-queue
apiVersion: apps/v1
kind: StatefulSet
spec:
  template:
    spec:
      containers:
        - name: mqtt
          image: mqtt
          resources:
            requests:
              # add [250m] examples/charts.ts:37
              cpu: 250m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
            limits:
              # add [1000m] examples/charts.ts:37
              cpu: 1000m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
metadata:
  # add [example-charts-backend-queue] examples/charts.ts:29
  name: example-charts-backend-queue
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label

---
apiVersion: v1
kind: Service
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
metadata:
  # add [example-charts-backend-queue] examples/charts.ts:29
  name: example-charts-backend-queue
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label
#<<< example-charts-backend-queue


---
#>>> example-charts-backend-worker
apiVersion: apps/v1
kind: Deployment
spec:
  template:
    spec:
      containers:
        - image: custom-worker
          # add [custom-worker] examples/charts.ts:47
          name: custom-worker
          resources:
            requests:
              # add [250m] examples/charts.ts:37
              cpu: 250m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
            limits:
              # add [1000m] examples/charts.ts:37
              cpu: 1000m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
    metadata:
      labels:
        # add [worker] examples/charts.ts:98
        component: worker
  selector:
    matchLabels:
      # add [worker] examples/charts.ts:98
      component: worker
metadata:
  # add [example-charts-backend-worker] examples/charts.ts:29
  name: example-charts-backend-worker
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label
#<<< example-charts-backend-worker


---
#>>> example-charts-backend-api
apiVersion: apps/v1
kind: Deployment
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      synku/app: example-charts-backend-api
  template:
    metadata:
      labels:
        synku/app: example-charts-backend-api
    spec:
      containers:
        - name: api
          image: custom-api:latest
          ports:
            - protocol: TCP
              containerPort: 9000
          resources:
            requests:
              # add [250m] examples/charts.ts:37
              cpu: 250m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
            limits:
              # add [1000m] examples/charts.ts:37
              cpu: 1000m
              # add [512Mi] examples/charts.ts:37
              memory: 512Mi
metadata:
  # add [example-charts-backend-api] src/components/default.ts:84
  name: example-charts-backend-api
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label

---
apiVersion: v1
kind: Service
spec:
  type: ClusterIP
  selector:
    synku/app: example-charts-backend-api
  ports:
    - port: 80
      targetPort: 9000
metadata:
  # add [example-charts-backend-api] src/components/default.ts:84
  name: example-charts-backend-api
  # add [example-ns] examples/charts.ts:30
  namespace: example-ns
  annotations:
    # add [annotation] examples/charts.ts:34
    static: annotation
  labels:
    # add [label] examples/charts.ts:31
    static: label
#<<< example-charts-backend-api
